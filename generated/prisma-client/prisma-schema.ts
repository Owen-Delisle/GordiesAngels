// Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregatePullRequest {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createPullRequest(data: PullRequestCreateInput!): PullRequest!
  updatePullRequest(data: PullRequestUpdateInput!, where: PullRequestWhereUniqueInput!): PullRequest
  updateManyPullRequests(data: PullRequestUpdateManyMutationInput!, where: PullRequestWhereInput): BatchPayload!
  upsertPullRequest(where: PullRequestWhereUniqueInput!, create: PullRequestCreateInput!, update: PullRequestUpdateInput!): PullRequest!
  deletePullRequest(where: PullRequestWhereUniqueInput!): PullRequest
  deleteManyPullRequests(where: PullRequestWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PullRequest {
  id: ID!
  longitude: Float!
  latitude: Float!
  userId: String!
  bid: Float!
}

type PullRequestConnection {
  pageInfo: PageInfo!
  edges: [PullRequestEdge]!
  aggregate: AggregatePullRequest!
}

input PullRequestCreateInput {
  longitude: Float!
  latitude: Float!
  userId: String!
  bid: Float!
}

type PullRequestEdge {
  node: PullRequest!
  cursor: String!
}

enum PullRequestOrderByInput {
  id_ASC
  id_DESC
  longitude_ASC
  longitude_DESC
  latitude_ASC
  latitude_DESC
  userId_ASC
  userId_DESC
  bid_ASC
  bid_DESC
}

type PullRequestPreviousValues {
  id: ID!
  longitude: Float!
  latitude: Float!
  userId: String!
  bid: Float!
}

type PullRequestSubscriptionPayload {
  mutation: MutationType!
  node: PullRequest
  updatedFields: [String!]
  previousValues: PullRequestPreviousValues
}

input PullRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PullRequestWhereInput
  AND: [PullRequestSubscriptionWhereInput!]
}

input PullRequestUpdateInput {
  longitude: Float
  latitude: Float
  userId: String
  bid: Float
}

input PullRequestUpdateManyMutationInput {
  longitude: Float
  latitude: Float
  userId: String
  bid: Float
}

input PullRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  longitude: Float
  longitude_not: Float
  longitude_in: [Float!]
  longitude_not_in: [Float!]
  longitude_lt: Float
  longitude_lte: Float
  longitude_gt: Float
  longitude_gte: Float
  latitude: Float
  latitude_not: Float
  latitude_in: [Float!]
  latitude_not_in: [Float!]
  latitude_lt: Float
  latitude_lte: Float
  latitude_gt: Float
  latitude_gte: Float
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  bid: Float
  bid_not: Float
  bid_in: [Float!]
  bid_not_in: [Float!]
  bid_lt: Float
  bid_lte: Float
  bid_gt: Float
  bid_gte: Float
  AND: [PullRequestWhereInput!]
}

input PullRequestWhereUniqueInput {
  id: ID
}

type Query {
  pullRequest(where: PullRequestWhereUniqueInput!): PullRequest
  pullRequests(where: PullRequestWhereInput, orderBy: PullRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PullRequest]!
  pullRequestsConnection(where: PullRequestWhereInput, orderBy: PullRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PullRequestConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  pullRequest(where: PullRequestSubscriptionWhereInput): PullRequestSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String
  firstname: String
  lastname: String
  password: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String
  firstname: String
  lastname: String
  password: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  firstname_ASC
  firstname_DESC
  lastname_ASC
  lastname_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  email: String
  firstname: String
  lastname: String
  password: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  firstname: String
  lastname: String
  password: String
}

input UserUpdateManyMutationInput {
  email: String
  firstname: String
  lastname: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`